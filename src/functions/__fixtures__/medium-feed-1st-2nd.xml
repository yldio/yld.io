<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[YLD Blog - Medium]]></title>
        <description><![CDATA[YLD&#39;s latest thoughts on Software Engineering, Design, leadership and Digital Products - Medium]]></description>
        <link>https://medium.com/yld-blog?source=rss----39c536548b9a---4</link>
        <image>
            <url>https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png</url>
            <title>YLD Blog - Medium</title>
            <link>https://medium.com/yld-blog?source=rss----39c536548b9a---4</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Wed, 20 Nov 2019 16:23:59 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/yld-blog" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[YLD announces a merger with Make Us Proud]]></title>
            <link>https://medium.com/yld-blog/yld-announces-a-merger-with-make-us-proud-cc53b8ad00e2?source=rss----39c536548b9a---4</link>
            <guid isPermaLink="false">https://medium.com/p/cc53b8ad00e2</guid>
            <category><![CDATA[digital]]></category>
            <category><![CDATA[yld]]></category>
            <category><![CDATA[product]]></category>
            <category><![CDATA[merger]]></category>
            <category><![CDATA[consulting]]></category>
            <dc:creator><![CDATA[YLD]]></dc:creator>
            <pubDate>Mon, 12 Aug 2019 09:59:05 GMT</pubDate>
            <atom:updated>2019-08-12T14:26:36.853Z</atom:updated>
            <content:encoded><![CDATA[<p><a href="https://www.yld.io/">Digital consultancy YLD</a> has announced a merger with digital product design agency Make Us Proud. <a href="https://www.linkedin.com/in/anthony-mann-11251214/">Anthony Mann</a>, previously CEO of Make Us Proud, will now take the role of Co-founder at YLD &amp; CPO at YLD Labs. He had this to say on the partnership;</p><blockquote>“At Make Us Proud we started with a mission to demonstrate that great products are the result of brilliant technology teams working as close to the customer as possible. We knew technology is the most creative medium we can work in today, and is fundamental to growing the most incredible businesses.”</blockquote><p>Over its four years, Make Us Proud enabled over £300 million in investment and exits for startups, and drove even more value through innovation with established tech and non-tech companies including Canon, Joyent (now part of Samsung), Microsoft and Google.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*CvyhK-oCYFEGRGNy3fovsg.jpeg" /><figcaption>YLD and Make Us Proud teams join together to celebrate the partnership</figcaption></figure><p>YLD’s Founder &amp; CEO <a href="https://www.linkedin.com/in/nunojob/">Nuno Job</a> met Anthony mere months from when both companies were started. YLD was focused on driving cutting-edge <a href="https://www.yld.io/open-source/">open source technology</a> within companies, creating platforms and services that were the enablers of innovation and vision. Anthony felt that they did this at an unrivalled level of quality and integrity in engineering.</p><p>Anthony showed Nuno an idea that Make Us Proud had been working on; a composable system of <a href="https://www.yld.io/speciality/react-js/">React.js</a> components that let users assemble new ideas for interfaces extremely quickly (this methodology has now grown into what we see today as Design Systems) and the two discussed how they were achieving similar outcomes with composable micro-services and scalable architecture to compose better systems. Nuno explains;</p><blockquote>“There was a clear match in our two approaches from day one. The Make Us Proud teams consistently and diligently drove great design and implementation through technology. We really believe that the two companies working in tandem can orchestrate real innovation and create some fundamental changes in today’s technological landscape.”</blockquote><p>Now, years later the two are empowering the entire stack of technologies and methodologies that drive technology agility in some of the best companies in the world. It’s highly likely you’ve used a product that YLD, Make Us Proud or both companies have worked on. And as a duo, known as YLD they intend to build incredible technology companies.</p><p><a href="https://www.yld.io/">YLD - Software engineering &amp; digital product consultancy in London</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=cc53b8ad00e2" width="1" height="1"><hr><p><a href="https://medium.com/yld-blog/yld-announces-a-merger-with-make-us-proud-cc53b8ad00e2">YLD announces a merger with Make Us Proud</a> was originally published in <a href="https://medium.com/yld-blog">YLD Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Reduce bloat of your Lambdas]]></title>
            <link>https://medium.com/yld-blog/reduce-bloat-of-your-lambdas-5121169c15f8?source=rss----39c536548b9a---4</link>
            <guid isPermaLink="false">https://medium.com/p/5121169c15f8</guid>
            <category><![CDATA[lambda]]></category>
            <category><![CDATA[aws]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[performance]]></category>
            <category><![CDATA[serverless]]></category>
            <dc:creator><![CDATA[Sérgio Ramos]]></dc:creator>
            <pubDate>Mon, 11 Nov 2019 14:40:37 GMT</pubDate>
            <atom:updated>2019-11-11T14:40:37.510Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="Photo by Vlad Kutepov on Unsplash" src="https://cdn-images-1.medium.com/max/1024/1*p_IgJZXI_556pWzFg_xKgw.jpeg" /><figcaption>Photo by <a href="https://unsplash.com/@kvtepov?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Vlad Kutepov</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></figcaption></figure><p>With most common JavaScript projects, the bulk of the bundle weight is in the dependencies.</p><p><a href="https://github.com/serverless/serverless">serverless</a> simplifies the creation of <a href="https://aws.amazon.com/lambda">Lambdas</a> by interpreting a - simpler than <a href="https://aws.amazon.com/cloudformation/">CloudFormation</a> - configuration file and automating the packaging, uploading, and deployment lifecycles of applications. When packaging, it can be smart enough to exclude development dependencies. It is a good start, but it can’t:</p><ol><li>identify which files per production dependency are actually used;</li><li>only bundle the dependencies used by each function.</li></ol><p>There is a better, simpler, and faster way though: <a href="https://github.com/jaydp17/serverless-plugin-ncc">serverless-plugin-ncc</a>. This plugin goes through each entry point of your functions and sends it to <a href="https://github.com/zeit/ncc">ncc</a>, which bundles them into a single file with only the required code, <a href="https://webpack.js.org/guides/tree-shaking/">tree-shaken</a>.</p><p><strong>Let’s see it in practice:</strong> we’re going to create 3 functions, one for a <a href="https://graphql.org">GraphQL</a> endpoint, a <a href="https://github.com/prisma-labs/graphql-playground">Playground</a> endpoint, and a simpler function to save payloads into an <a href="https://aws.amazon.com/s3/">S3</a> bucket.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/e8c5eb9bbba33b093ff98f517cbe9be5/href">https://medium.com/media/e8c5eb9bbba33b093ff98f517cbe9be5/href</a></iframe><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/3e20cb2864309654884dd5aea3bd199b/href">https://medium.com/media/3e20cb2864309654884dd5aea3bd199b/href</a></iframe><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/1e6aa900da5987f690c29e783000f8ff/href">https://medium.com/media/1e6aa900da5987f690c29e783000f8ff/href</a></iframe><p><strong>And our </strong><a href="https://github.com/serverless/serverless"><strong>serverless</strong></a><strong> config:</strong></p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/6604bf9efd5adc61741bf801d89c16e2/href">https://medium.com/media/6604bf9efd5adc61741bf801d89c16e2/href</a></iframe><p>As you can see, nothing too fancy: three functions declared each with its route and handler.</p><p>Setting <a href="https://serverless.com/framework/docs/providers/aws/guide/packaging/">package</a>.individually will generate a bundle per each function. We control that by assigning it to the INDIVIDUALLY environment variable. We also control whether <a href="https://github.com/zeit/ncc">serverless-plugin-ncc</a> is active based on the NCC environment variable. For each to be active, the variable value needs to be <em>truthy</em>.</p><p>With this setup, we can test different configurations via the <a href="https://github.com/serverless/serverless">serverless</a> cli:</p><pre>λ time NODE_ENV=production ./node_modules/.bin/sls package --stage production<br>16.37s user 4.49s system 100% cpu 20.681 total<br>λ ls -lah .serverless<br>4.7M sls-ncc-example.zip</pre><p>With a global output and no <a href="https://github.com/zeit/ncc">ncc</a> bundling, packaging takes <strong>~20s</strong> and produces a <strong>4.7MB</strong> zip.</p><p>Here’s what happens when we run the same code and set individually to true:</p><pre>λ time NODE_ENV=production INDIVIDUALLY=1 ./node_modules/.bin/sls package --stage production<br>54.07s user 9.74s system 145% cpu 43.994 total<br>λ ls -lah .serverless<br>4.7M GraphQL.zip<br>4.7M Playgroud.zip<br>4.7M Upload.zip</pre><p>Because our handlers are small and <a href="https://github.com/serverless/serverless">serverless</a> doesn’t exclude dependencies based on the handler, what we get is practically the same output size for each package. Also, it takes +3x the time it took previously because it’s in practice the same logic but for each function now.</p><p><strong>Now, the exciting test:</strong></p><pre>λ time NODE_ENV=production INDIVIDUALLY=1 NCC=1 ./node_modules/.bin/sls package --stage production<br>9.36s user 0.86s system 129% cpu 7.923 total<br>λ ls -lah .serverless<br>797K GraphQL.zip<br>5.5K Playgroud.zip<br>21K  Upload.zip</pre><p><strong>Not only we reduced our packaging time in at least half, but we also reduced our packages by at least 6x.</strong></p><p>You can check out the full source code of this example <a href="https://gist.github.com/sergioramos/bbf231cc1ce743b6ee9720a183f3c906">here</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5121169c15f8" width="1" height="1"><hr><p><a href="https://medium.com/yld-blog/reduce-bloat-of-your-lambdas-5121169c15f8">Reduce bloat of your Lambdas</a> was originally published in <a href="https://medium.com/yld-blog">YLD Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
    </channel>
</rss>
